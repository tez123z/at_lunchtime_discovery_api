# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/favorite_places', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # FavoritePlace. As you add validations to FavoritePlace, be sure to
  # adjust the attributes here as well.

  let(:user) { Fabricate(:user) }

  let(:valid_headers) do
    headers = { 'Accept' => 'application/json', 'Content-Type' => 'application/json' }
    Devise::JWT::TestHelpers.auth_headers(headers, user)
  end

  let(:google_place) do
    result = GoogleServices::Place::TextSearch.call({
                                                      query: 'Burgers',
                                                      location: '34.885253490,-82.4170214515'
                                                    })

    result.payload[rand(0..result.payload.length - 1)]
  end

  let(:invalid_attributes) do
    {
      place_id: nil
    }
  end

  let(:valid_attributes) do
    {
      place_id: google_place['place_id'],
      user_id: user.id
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      FavoritePlace.create! valid_attributes
      get favorite_places_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      favorite_place = FavoritePlace.create! valid_attributes
      get favorite_place_url(favorite_place), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new FavoritePlace' do
        expect do
          post favorite_places_url,
               params: { favorite_place: valid_attributes }, headers: valid_headers, as: :json
        end.to change(FavoritePlace, :count).by(1)
      end

      it 'renders a JSON response with the new favorite_place' do
        post favorite_places_url,
             params: { favorite_place: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new FavoritePlace' do
        expect do
          post favorite_places_url,
               params: { favorite_place: invalid_attributes }, as: :json
        end.to change(FavoritePlace, :count).by(0)
      end

      it 'renders a JSON response with errors for the new favorite_place' do
        post favorite_places_url,
             params: { favorite_place: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested favorite_place' do
      favorite_place = FavoritePlace.create! valid_attributes
      expect do
        delete favorite_place_url(favorite_place), headers: valid_headers, as: :json
      end.to change(FavoritePlace, :count).by(-1)
    end
  end
end
